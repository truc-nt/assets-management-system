// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package services is a generated GoMock package.
package services

import (
        reflect "reflect"
        models "server/internal/models"

        gomock "github.com/golang/mock/gomock"
)

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
        ctrl     *gomock.Controller
        recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
        mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
        mock := &MockIUserService{ctrl: ctrl}
        mock.recorder = &MockIUserServiceMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
        return m.recorder
}

// AuthenticateUser mocks base method.
func (m *MockIUserService) AuthenticateUser(userAuthParam models.UserAuthParam) (models.User, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "AuthenticateUser", userAuthParam)
        ret0, _ := ret[0].(models.User)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// AuthenticateUser indicates an expected call of AuthenticateUser.
func (mr *MockIUserServiceMockRecorder) AuthenticateUser(userAuthParam interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateUser", reflect.TypeOf((*MockIUserService)(nil).AuthenticateUser), userAuthParam)
}

// CreateUser mocks base method.
func (m *MockIUserService) CreateUser(UserRegisterParam models.UserRegisterParam) (uint32, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CreateUser", UserRegisterParam)
        ret0, _ := ret[0].(uint32)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserServiceMockRecorder) CreateUser(UserRegisterParam interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserService)(nil).CreateUser), UserRegisterParam)
}

// FindUserByUsername mocks base method.
func (m *MockIUserService) FindUserByUsername(username string) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "FindUserByUsername", username)
        ret0, _ := ret[0].(error)
        return ret0
}

// FindUserByUsername indicates an expected call of FindUserByUsername.
func (mr *MockIUserServiceMockRecorder) FindUserByUsername(username interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByUsername", reflect.TypeOf((*MockIUserService)(nil).FindUserByUsername), username)
}

// GetUserById mocks base method.
func (m *MockIUserService) GetUserById(id uint32) (*models.User, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetUserById", id)
        ret0, _ := ret[0].(*models.User)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockIUserServiceMockRecorder) GetUserById(id interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockIUserService)(nil).GetUserById), id)
}

// GetUsers mocks base method.
func (m *MockIUserService) GetUsers(param *models.GetUsersParam) ([]*models.User, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetUsers", param)
        ret0, _ := ret[0].([]*models.User)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockIUserServiceMockRecorder) GetUsers(param interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockIUserService)(nil).GetUsers), param)
}

// SetLoginUser mocks base method.
func (m *MockIUserService) SetLoginUser(id uint32) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "SetLoginUser", id)
        ret0, _ := ret[0].(error)
        return ret0
}

// SetLoginUser indicates an expected call of SetLoginUser.
func (mr *MockIUserServiceMockRecorder) SetLoginUser(id interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLoginUser", reflect.TypeOf((*MockIUserService)(nil).SetLoginUser), id)
}

// SetLogoutUser mocks base method.
func (m *MockIUserService) SetLogoutUser(id uint32) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "SetLogoutUser", id)
        ret0, _ := ret[0].(error)
        return ret0
}

// SetLogoutUser indicates an expected call of SetLogoutUser.
func (mr *MockIUserServiceMockRecorder) SetLogoutUser(id interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogoutUser", reflect.TypeOf((*MockIUserService)(nil).SetLogoutUser), id)
}

// UpdateUser mocks base method.
func (m *MockIUserService) UpdateUser(id uint32, user *models.User) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UpdateUser", id, user)
        ret0, _ := ret[0].(error)
        return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIUserServiceMockRecorder) UpdateUser(id, user interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIUserService)(nil).UpdateUser), id, user)
}
