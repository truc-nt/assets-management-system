// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package models is a generated GoMock package.
package models

import (
        reflect "reflect"

        gomock "github.com/golang/mock/gomock"
        gorm "gorm.io/gorm"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
        ctrl     *gomock.Controller
        recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
        mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
        mock := &MockIUserRepository{ctrl: ctrl}
        mock.recorder = &MockIUserRepositoryMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
        return m.recorder
}

// AuthenticateUser mocks base method.
func (m *MockIUserRepository) AuthenticateUser(db *gorm.DB, userAuthParam UserAuthParam) (User, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "AuthenticateUser", db, userAuthParam)
        ret0, _ := ret[0].(User)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// AuthenticateUser indicates an expected call of AuthenticateUser.
func (mr *MockIUserRepositoryMockRecorder) AuthenticateUser(db, userAuthParam interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateUser", reflect.TypeOf((*MockIUserRepository)(nil).AuthenticateUser), db, userAuthParam)
}

// CreateUser mocks base method.
func (m *MockIUserRepository) CreateUser(userRegisterParam UserRegisterParam) (uint32, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CreateUser", userRegisterParam)
        ret0, _ := ret[0].(uint32)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserRepositoryMockRecorder) CreateUser(userRegisterParam interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserRepository)(nil).CreateUser), userRegisterParam)
}

// FindUserByUsername mocks base method.
func (m *MockIUserRepository) FindUserByUsername(username string) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "FindUserByUsername", username)
        ret0, _ := ret[0].(error)
        return ret0
}

// FindUserByUsername indicates an expected call of FindUserByUsername.
func (mr *MockIUserRepositoryMockRecorder) FindUserByUsername(username interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByUsername", reflect.TypeOf((*MockIUserRepository)(nil).FindUserByUsername), username)
}

// GetUserById mocks base method.
func (m *MockIUserRepository) GetUserById(id uint32) (*User, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetUserById", id)
        ret0, _ := ret[0].(*User)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockIUserRepositoryMockRecorder) GetUserById(id interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockIUserRepository)(nil).GetUserById), id)
}

// GetUsers mocks base method.
func (m *MockIUserRepository) GetUsers(param *GetUsersParam) ([]*User, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetUsers", param)
        ret0, _ := ret[0].([]*User)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockIUserRepositoryMockRecorder) GetUsers(param interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockIUserRepository)(nil).GetUsers), param)
}

// SetLoginUser mocks base method.
func (m *MockIUserRepository) SetLoginUser(id uint32) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "SetLoginUser", id)
        ret0, _ := ret[0].(error)
        return ret0
}

// SetLoginUser indicates an expected call of SetLoginUser.
func (mr *MockIUserRepositoryMockRecorder) SetLoginUser(id interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLoginUser", reflect.TypeOf((*MockIUserRepository)(nil).SetLoginUser), id)
}

// SetLogoutUser mocks base method.
func (m *MockIUserRepository) SetLogoutUser(id uint32) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "SetLogoutUser", id)
        ret0, _ := ret[0].(error)
        return ret0
}

// SetLogoutUser indicates an expected call of SetLogoutUser.
func (mr *MockIUserRepositoryMockRecorder) SetLogoutUser(id interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogoutUser", reflect.TypeOf((*MockIUserRepository)(nil).SetLogoutUser), id)
}

// UpdateUser mocks base method.
func (m *MockIUserRepository) UpdateUser(user *User) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UpdateUser", user)
        ret0, _ := ret[0].(error)
        return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIUserRepositoryMockRecorder) UpdateUser(user interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIUserRepository)(nil).UpdateUser), user)
}