// Code generated by MockGen. DO NOT EDIT.
// Source: asset.go

// Package models is a generated GoMock package.
package models

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIAssetRepository is a mock of IAssetRepository interface.
type MockIAssetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAssetRepositoryMockRecorder
}

// MockIAssetRepositoryMockRecorder is the mock recorder for MockIAssetRepository.
type MockIAssetRepositoryMockRecorder struct {
	mock *MockIAssetRepository
}

// NewMockIAssetRepository creates a new mock instance.
func NewMockIAssetRepository(ctrl *gomock.Controller) *MockIAssetRepository {
	mock := &MockIAssetRepository{ctrl: ctrl}
	mock.recorder = &MockIAssetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAssetRepository) EXPECT() *MockIAssetRepositoryMockRecorder {
	return m.recorder
}

// CreateAsset mocks base method.
func (m *MockIAssetRepository) CreateAsset(asset *Asset) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAsset", asset)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAsset indicates an expected call of CreateAsset.
func (mr *MockIAssetRepositoryMockRecorder) CreateAsset(asset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAsset", reflect.TypeOf((*MockIAssetRepository)(nil).CreateAsset), asset)
}

// DeleteAsset mocks base method.
func (m *MockIAssetRepository) DeleteAsset(id uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAsset", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAsset indicates an expected call of DeleteAsset.
func (mr *MockIAssetRepositoryMockRecorder) DeleteAsset(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAsset", reflect.TypeOf((*MockIAssetRepository)(nil).DeleteAsset), id)
}

// GetAssetById mocks base method.
func (m *MockIAssetRepository) GetAssetById(id uint32) (*Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetById", id)
	ret0, _ := ret[0].(*Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetById indicates an expected call of GetAssetById.
func (mr *MockIAssetRepositoryMockRecorder) GetAssetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetById", reflect.TypeOf((*MockIAssetRepository)(nil).GetAssetById), id)
}

// GetAssets mocks base method.
func (m *MockIAssetRepository) GetAssets(param *GetAssetsParam) ([]*Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssets", param)
	ret0, _ := ret[0].([]*Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssets indicates an expected call of GetAssets.
func (mr *MockIAssetRepositoryMockRecorder) GetAssets(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssets", reflect.TypeOf((*MockIAssetRepository)(nil).GetAssets), param)
}

// UpdateAsset mocks base method.
func (m *MockIAssetRepository) UpdateAsset(asset *Asset) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAsset", asset)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAsset indicates an expected call of UpdateAsset.
func (mr *MockIAssetRepositoryMockRecorder) UpdateAsset(asset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAsset", reflect.TypeOf((*MockIAssetRepository)(nil).UpdateAsset), asset)
}
